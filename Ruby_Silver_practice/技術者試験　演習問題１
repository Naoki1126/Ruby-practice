1: 1,4   rand,goto,constはRubyの予約語にはない
2: 3  :2 1行目で宣言している変数xと2行目からのeachメソッド内で使用されているブロック変数xはスコープの関係で別変数として扱われる。プロックを抜けた後の変数xの値は0になる。実行結果は[1 2 3 0]
3: 1,4   0はtrue NULLはRubyで定義されていない
4: 2  :4 |演算子と&演算子は、左辺の評価結果に関係なく右辺を評価する
5: 2     ..は両端を含む。...は右辺を含まない。
6: 2　:４ 定数は再代入を行う時に警告が発生する。破壊的メソッドを呼び出しているだけなので警告は発生せず文字列は置き換わる。　
7: 1     例外の基本的知識
8: 4     rescue節は rescue[例外型] => [例外変数]と記述する。begin[例外型]の例外が発生した場合、[例外変数]には例外オブジェクトへの参照が渡され、処理される。
9: 4  :1 ?に１文字足すと、その文字自身を一文字だけ含む文字列オブジェクトを返します。
10: 1    サプクラスの定義には<を使用する。選択肢３、４のKernelはモジュールなので、モジュールを継承するクラスは定義できない。
11: 1 :4 12行目でChildクラスのオブジェクトが生成されるため、初期化時に実行されるinitializeメソッドは、8~10行目。インスタンス変数nameにはChaildHogeが格納される。
12: 3 　　既存のクラスにメソッドを追加することをクラスの拡張と呼ぶ。出題コードでは既存のクラスintegerを拡張し、to_squareというメソッドを追加している
13: 1 :2 Stringクラスのto_iは、数字文字列を整数に変換する。整数とみなされない文字があれば、その一つ前の文字までを変換対象とする。出題コードでは、整数とみなされない文字aの直前まで、12までが変換対象となる。
14: 3 
15: 4
16: 1 :2 Arrayクラスのjoinは配列の要素を文字列化し、引数をセパレータとして連結した新しい文字列を返す。
17: 1 
18: 2 :3 配列に演算子&を適用すると、配列の積(共通の要素だけを取り出す)を返す。配列に演算子+を適用すると、連結した配列を返す。
19: 3 :1 演算子||は、真であるオペランドの値を返すが、左が真の場合右は評価されない。aはnilでもfalseでもないので真である。従って[1,2,3,4]を返します。
20: 2
21: 3 :2 配列に+を適用すると、両オペランドの配列を連結した配列を生成して返す。演算子-は左から右の配列要素を削除した値を返す。よって[1,1,5]となる。
22: 3
23: 3
24: 1    Array.shiftは配列の先頭の要素を取り除く。unshiftは配列の先頭に要素を追加。ただし、引数を指定しなければ何も起こらない。pushは配列の最後に要素を追加する。
25: 1 :4 Array.concatは配列を連結する。compactはnilを削除。uniqは重複している要素の削除。ただしcompactとuniqは非破壊的メソッドなのでオブジェクトの値は変更しない。
26: 1　  detectとfindは同義。ブロックを評価し、値が真になった最初の要素を返す。
27: 1,4  mapとcollectは同じ意味。
28: 1    文字の列を%w()で囲むと、要素が文字列の配列として評価される。文字列の区切りは空白文字の並び。この時要素を「,」で区切ったり、文字列を「""」で囲むと、そのカンマやダブルクォートも文字列の一部となる。
29: 2 :1,2,4  Array.zipは自身と引数に渡した配列の各要素からなる配列を生成して返す。プラックを渡した場合は、各要素を順番に返すので、1と2は同じ意味になる。Array.transposeは2次元配列の行と列を入れ替えるメソッド。
30: 2 :3 ヒアドキュメントの終端識別子は左寄せにしなければいけない。
31: 3    String.encodingはその文字列の文字コードを表すEncodingオブジェクトを返す。明示的に文字コードの指定がなければデフォルトのスクリプトエンコーディングはUTF-8
32: 2 :1 3行目で変数bは、変数aと同じ文字列'Ruby'を参照している。4行目のupcaseは、文字列を大文字に変換して返すが、非破壊的メソッドのため元の文字列は変更しない。
33: 4 :3 String.indexは部分文字列を探索し見つかった位置を返す。第2引数には、探索の開始位置を指定する。出題コードの探索開始位置は、5(6番目)
34: 4  String.chopは末尾の1文字を削除する。chompは末尾が行区切り文字であれば削除する。ただし両者とも非破壊的メソッド
35: 1
36: 2  sliceの引数に正規表現を指定すると、そのパターンに最初にマッチした文字列を返す。問題の正規表現/o../はoで始まる任意の3文字にマッチするため、最初にマッチしたogeが返る。
37: 4 :3 String.deleteは引数に含まれる文字を文字列から取り除く。^で始まる文字列は、その文字列以外を削除する。例えば[^1]の場合、1以外を削除する。[-]は文字の範囲を示す。例えば[1-3]の場合、1,2,3を意味する。
38: 1 :3 「一つ以上の数字のみで構成される行」とは「数字で始まり、数字の繰り返しで終わる行」という意味。この条件にマッチするのは選択肢3。選択肢１は「数字で始まる2文字の行」の意味。2文字目が数字以外でもマッチする。
        　選択肢2は「数字の0文字以上の繰り返しの行」の意味で空行にもマッチする。選択肢４は「数字2文字で始まる行」の意味。3文字以降が数字以外でもマッチする。
39: 3　　　String.scanは正規表現にマッチする部分文字列を配列で返す。正規表現\d+は、数字の繰り返しです。出題コードの文字列で数字のみの繰り返しパターンは123と456の2つ。
40: 2 :3 数値を文字コードとして見た時に、対応するもじに変換するメソッドはchrメソッド、逆に文字を対応する数値に変換するメソッドはordメソッド。65.to_sの結果は"65"、"A.to_iの結果は0になる。
41: 3 :2 正規表現パターン/[A-Z][^A-Z]+/は、最初が英大文字、2文字目以降が英大文字以外の文字列にマッチする。従って選択肢2の”Hoge”が該当する。
42: 3  Ruby 2.1 では{"a": 1,"b": 2,"c": 3}のようにキーの部分を文字列リテラルで表記することはできず文房エラーになる。ただしRuby 2.2 からはこの書き方で{:a => 1,:b => 2,:c => 3}のHashオブジェクトを作成することができる。
43: 4
44: 2 
45: 1
46: 2
47: 5
48: 2
49: 4
50: 1



